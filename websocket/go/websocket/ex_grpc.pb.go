// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: ex.proto

package websocket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebSocketClient is the client API for WebSocket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebSocketClient interface {
	ServerToClientUnary(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Result, error)
	ServerToClientStream(ctx context.Context, opts ...grpc.CallOption) (WebSocket_ServerToClientStreamClient, error)
}

type webSocketClient struct {
	cc grpc.ClientConnInterface
}

func NewWebSocketClient(cc grpc.ClientConnInterface) WebSocketClient {
	return &webSocketClient{cc}
}

func (c *webSocketClient) ServerToClientUnary(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/websocket.WebSocket/serverToClientUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) ServerToClientStream(ctx context.Context, opts ...grpc.CallOption) (WebSocket_ServerToClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebSocket_ServiceDesc.Streams[0], "/websocket.WebSocket/serverToClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &webSocketServerToClientStreamClient{stream}
	return x, nil
}

type WebSocket_ServerToClientStreamClient interface {
	Send(*Name) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type webSocketServerToClientStreamClient struct {
	grpc.ClientStream
}

func (x *webSocketServerToClientStreamClient) Send(m *Name) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webSocketServerToClientStreamClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebSocketServer is the server API for WebSocket service.
// All implementations should embed UnimplementedWebSocketServer
// for forward compatibility
type WebSocketServer interface {
	ServerToClientUnary(context.Context, *Name) (*Result, error)
	ServerToClientStream(WebSocket_ServerToClientStreamServer) error
}

// UnimplementedWebSocketServer should be embedded to have forward compatible implementations.
type UnimplementedWebSocketServer struct {
}

func (UnimplementedWebSocketServer) ServerToClientUnary(context.Context, *Name) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerToClientUnary not implemented")
}
func (UnimplementedWebSocketServer) ServerToClientStream(WebSocket_ServerToClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerToClientStream not implemented")
}

// UnsafeWebSocketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebSocketServer will
// result in compilation errors.
type UnsafeWebSocketServer interface {
	mustEmbedUnimplementedWebSocketServer()
}

func RegisterWebSocketServer(s grpc.ServiceRegistrar, srv WebSocketServer) {
	s.RegisterService(&WebSocket_ServiceDesc, srv)
}

func _WebSocket_ServerToClientUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).ServerToClientUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websocket.WebSocket/serverToClientUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).ServerToClientUnary(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_ServerToClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebSocketServer).ServerToClientStream(&webSocketServerToClientStreamServer{stream})
}

type WebSocket_ServerToClientStreamServer interface {
	Send(*Result) error
	Recv() (*Name, error)
	grpc.ServerStream
}

type webSocketServerToClientStreamServer struct {
	grpc.ServerStream
}

func (x *webSocketServerToClientStreamServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webSocketServerToClientStreamServer) Recv() (*Name, error) {
	m := new(Name)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebSocket_ServiceDesc is the grpc.ServiceDesc for WebSocket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebSocket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "websocket.WebSocket",
	HandlerType: (*WebSocketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "serverToClientUnary",
			Handler:    _WebSocket_ServerToClientUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "serverToClientStream",
			Handler:       _WebSocket_ServerToClientStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ex.proto",
}
